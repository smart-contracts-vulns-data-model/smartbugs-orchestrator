{
  "slither": [
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function withdraw"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "endLine": 22,
              "startLine": 16
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy in SimpleDAO.withdraw (SimpleDAO.sol#16-22):\n\tExternal calls:\n\t- res = msg.sender.call.value(amount)() (SimpleDAO.sol#19)\n\tState variables written after the call(s):\n\t- credit (SimpleDAO.sol#20)\n"
      },
      "ruleId": "slither_reentrancy_eth",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function donate"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "endLine": 14,
              "startLine": 12
            }
          }
        }
      ],
      "message": {
        "text": "SimpleDAO.donate (SimpleDAO.sol#12-14) should be declared external\n"
      },
      "ruleId": "slither_external_function",
      "sbo": [
        {
          "name": "Function Default Visibility",
          "description": "Improper or missing usage of function visibility specifiers (external, public, internal, or private) and modifiers leading to unauthorized access ( i.e functions meant to be  invoked only by external contracts should be marked with the external modifier  insteadof public to be invoked using calldata (memory not modified by the function))",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Visibility / Privacy"
          ],
          "attacks": [
            "Parity Multi-Sig Wallet 2017 (First Hack)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unauthorized Accessibility due to Wrong Function or State Variable Visibility"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Wrong Function Modifier"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-100: Function Default Visibility"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "External Function"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Implicit Visibility Level"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Failure To Use Function Modifiers"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Visibility/ Exposed Functions or Secrets/ Failure To Use Cryptography"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Access Control"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Function / State Default Visibility"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Visibility Issues"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Unspecified Visibility Level"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unprotected Function"
            }
          ],
          "cwes": [
            "CWE-710: Improper Adherence to Coding Standards",
            "CWE-284: Improper Access Control"
          ],
          "swcs": [
            "SWC-100: Function Default Visibility"
          ],
          "tools": [
            "smartcheck",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-094f03c7-3e04-4cb8-bf54-beb4da11dc60"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function withdraw"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "endLine": 22,
              "startLine": 16
            }
          }
        }
      ],
      "message": {
        "text": "SimpleDAO.withdraw (SimpleDAO.sol#16-22) should be declared external\n"
      },
      "ruleId": "slither_external_function",
      "sbo": [
        {
          "name": "Function Default Visibility",
          "description": "Improper or missing usage of function visibility specifiers (external, public, internal, or private) and modifiers leading to unauthorized access ( i.e functions meant to be  invoked only by external contracts should be marked with the external modifier  insteadof public to be invoked using calldata (memory not modified by the function))",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Visibility / Privacy"
          ],
          "attacks": [
            "Parity Multi-Sig Wallet 2017 (First Hack)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unauthorized Accessibility due to Wrong Function or State Variable Visibility"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Wrong Function Modifier"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-100: Function Default Visibility"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "External Function"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Implicit Visibility Level"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Failure To Use Function Modifiers"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Visibility/ Exposed Functions or Secrets/ Failure To Use Cryptography"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Access Control"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Function / State Default Visibility"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Visibility Issues"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Unspecified Visibility Level"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unprotected Function"
            }
          ],
          "cwes": [
            "CWE-710: Improper Adherence to Coding Standards",
            "CWE-284: Improper Access Control"
          ],
          "swcs": [
            "SWC-100: Function Default Visibility"
          ],
          "tools": [
            "smartcheck",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-094f03c7-3e04-4cb8-bf54-beb4da11dc60"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function queryCredit"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "endLine": 26,
              "startLine": 24
            }
          }
        }
      ],
      "message": {
        "text": "SimpleDAO.queryCredit (SimpleDAO.sol#24-26) should be declared external\n"
      },
      "ruleId": "slither_external_function",
      "sbo": [
        {
          "name": "Function Default Visibility",
          "description": "Improper or missing usage of function visibility specifiers (external, public, internal, or private) and modifiers leading to unauthorized access ( i.e functions meant to be  invoked only by external contracts should be marked with the external modifier  insteadof public to be invoked using calldata (memory not modified by the function))",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Visibility / Privacy"
          ],
          "attacks": [
            "Parity Multi-Sig Wallet 2017 (First Hack)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unauthorized Accessibility due to Wrong Function or State Variable Visibility"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Wrong Function Modifier"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-100: Function Default Visibility"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "External Function"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Implicit Visibility Level"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Failure To Use Function Modifiers"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Visibility/ Exposed Functions or Secrets/ Failure To Use Cryptography"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Access Control"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Function / State Default Visibility"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Function Default Visibility"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Erroneous Visibility"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Visibility Issues"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Visibility of Exposed Functions"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Unspecified Visibility Level"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Default Visibility"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unprotected Function"
            }
          ],
          "cwes": [
            "CWE-710: Improper Adherence to Coding Standards",
            "CWE-284: Improper Access Control"
          ],
          "swcs": [
            "SWC-100: Function Default Visibility"
          ],
          "tools": [
            "smartcheck",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-094f03c7-3e04-4cb8-bf54-beb4da11dc60"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 7
            }
          }
        }
      ],
      "message": {
        "text": "Detected issues with version pragma in SimpleDAO.sol:\n\t- pragma solidity^0.4.2 (SimpleDAO.sol#7): it allows old versions\n"
      },
      "ruleId": "slither_solc_version",
      "sbo": [
        {
          "name": "Outdated Compiler Version",
          "description": "Usage of outdated compiler versions with old compiler bugs can lead to security,  compatibility and performance issues as outdated compiler can have known flaws,  may not work properly with latest smart contract platforms and may not support  latest optimizations or algorithms, resulting in inefficiency of execution or excessive  resource consumption  ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Compiler-related"
          ],
          "attacks": [],
          "references": [
            {
              "ref_id": "Rameder 2021",
              "alias": "Outdated Compiler Version"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Outdated Compiler Version"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-102: Outdated Compiler Version"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Outdated Compiler Version"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Outdated Compiler or Solidity Version"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Outdated Compiler Version"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Outdated Compiler Version"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Outdated Compiler Version"
            }
          ],
          "cwes": [
            "CWE-937: Using Components with Known Vulnerabilities"
          ],
          "swcs": [
            "SWC-102: Outdated Compiler Version"
          ],
          "tools": [
            "smartcheck",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-973359f1-6956-474e-8c0e-f57c8abca1d6"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function withdraw"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "endLine": 22,
              "startLine": 16
            }
          }
        }
      ],
      "message": {
        "text": "Low level call in SimpleDAO.withdraw (SimpleDAO.sol#16-22):\n\t-res = msg.sender.call.value(amount)() SimpleDAO.sol#19\n"
      },
      "ruleId": "slither_low_level_calls",
      "sbo": [
        {
          "name": "Low Level Calls",
          "description": "low level calls over raw addresses don't verify the existence of code (Successful call to non-existent contract) or the call success leading to unexpected behaviour",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Function Calls"
          ],
          "attacks": [
            "King of the Ether Throne",
            "EtherPot"
          ],
          "references": [
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Low Level Calls"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Check of Low-level Call Return Value"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Direct Call To Untrusted Contract"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Unchecked Send"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified External Call"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Bartoletti 2020",
              "alias": "Low Level Calls"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-104: Unchecked Call Return Value"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Low Level Calls"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unchecked External Call"
            }
          ],
          "cwes": [
            "CWE-252: Unchecked Return Value",
            "CWE-703: Improper Check or Handling of Exceptional Conditions"
          ],
          "swcs": [
            "SWC-104: Unchecked Call Return Value"
          ],
          "tools": [
            "smartcheck",
            "slither",
            "semgrep"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "Unchecked External Call"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-6e4346b6-ee6a-4c6f-b521-7eda9d6d5c24"
        }
      ]
    }
  ],
  "securify": [],
  "confuzzius": [
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 19
            }
          }
        }
      ],
      "message": {
        "text": "Classification: SWC-107\nSeverity: High"
      },
      "ruleId": "confuzzius_Reentrancy",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 19
            }
          }
        }
      ],
      "message": {
        "text": "Classification: SWC-104\nSeverity: Medium"
      },
      "ruleId": "confuzzius_Unhandled_Exception",
      "sbo": [
        {
          "name": "Mishandled Exception",
          "description": "Unreported exception or error  in the callee (i.e. call doesn't propagate exceptions) ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "King of the Ether Throne",
            "DAO",
            "Integer Over/Under Flow",
            "GovernMental"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Use of Exception Handling Functions"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Exception Handling /Mishandled Exceptions"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked Call Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Mishandled Exception - ME"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Unhandled or Mishandled Exceptions"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            }
          ],
          "cwes": [
            "CWE-703: Improper Check or Handling of Exceptional Conditions",
            "CWE-252: Unchecked Return Value"
          ],
          "swcs": [],
          "tools": [
            "sfuzz",
            "securify",
            "confuzzius"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [
            "Unchecked External Call",
            "Low Level Calls"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-c736aa6a-ed15-4ff7-8dfc-1d5a7faa5640"
        }
      ]
    }
  ],
  "sfuzz": [
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function donate"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy"
      },
      "ruleId": "sfuzz_Reentrancy",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function withdraw"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy"
      },
      "ruleId": "sfuzz_Reentrancy",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function queryCredit"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy"
      },
      "ruleId": "sfuzz_Reentrancy",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function donate"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Exception Disorder"
      },
      "ruleId": "sfuzz_Exception_Disorder",
      "sbo": [
        {
          "name": "Mishandled Exception",
          "description": "Unreported exception or error  in the callee (i.e. call doesn't propagate exceptions) ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "King of the Ether Throne",
            "DAO",
            "Integer Over/Under Flow",
            "GovernMental"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Use of Exception Handling Functions"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Exception Handling /Mishandled Exceptions"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked Call Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Mishandled Exception - ME"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Unhandled or Mishandled Exceptions"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            }
          ],
          "cwes": [
            "CWE-703: Improper Check or Handling of Exceptional Conditions",
            "CWE-252: Unchecked Return Value"
          ],
          "swcs": [],
          "tools": [
            "sfuzz",
            "securify",
            "confuzzius"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [
            "Unchecked External Call",
            "Low Level Calls"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-c736aa6a-ed15-4ff7-8dfc-1d5a7faa5640"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function withdraw"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Exception Disorder"
      },
      "ruleId": "sfuzz_Exception_Disorder",
      "sbo": [
        {
          "name": "Mishandled Exception",
          "description": "Unreported exception or error  in the callee (i.e. call doesn't propagate exceptions) ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "King of the Ether Throne",
            "DAO",
            "Integer Over/Under Flow",
            "GovernMental"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Use of Exception Handling Functions"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Exception Handling /Mishandled Exceptions"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked Call Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Mishandled Exception - ME"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Unhandled or Mishandled Exceptions"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            }
          ],
          "cwes": [
            "CWE-703: Improper Check or Handling of Exceptional Conditions",
            "CWE-252: Unchecked Return Value"
          ],
          "swcs": [],
          "tools": [
            "sfuzz",
            "securify",
            "confuzzius"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [
            "Unchecked External Call",
            "Low Level Calls"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-c736aa6a-ed15-4ff7-8dfc-1d5a7faa5640"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO.sol, function queryCredit"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            }
          }
        }
      ],
      "message": {
        "text": "Exception Disorder"
      },
      "ruleId": "sfuzz_Exception_Disorder",
      "sbo": [
        {
          "name": "Mishandled Exception",
          "description": "Unreported exception or error  in the callee (i.e. call doesn't propagate exceptions) ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "King of the Ether Throne",
            "DAO",
            "Integer Over/Under Flow",
            "GovernMental"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Use of Exception Handling Functions"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Exception Handling /Mishandled Exceptions"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked Call Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Mishandled Exception - ME"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Unhandled or Mishandled Exceptions"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Exception Disorders"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Mishandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            }
          ],
          "cwes": [
            "CWE-703: Improper Check or Handling of Exceptional Conditions",
            "CWE-252: Unchecked Return Value"
          ],
          "swcs": [],
          "tools": [
            "sfuzz",
            "securify",
            "confuzzius"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [
            "Unchecked External Call",
            "Low Level Calls"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-c736aa6a-ed15-4ff7-8dfc-1d5a7faa5640"
        }
      ]
    }
  ],
  "smartcheck": [],
  "mythril": [
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 289,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
      },
      "ruleId": "mythril_0_23_15_Exception_State_SWC_110",
      "sbo": [
        {
          "name": "Assert / Require / Revert Violation",
          "description": "Vulnerability where the conditions specified by the contract's assertions, requirements, or revert statements are not properly met during execution",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Assert / Require / Revert Statements"
          ],
          "attacks": [],
          "references": [
            {
              "ref_id": "Rameder 2021",
              "alias": "Assert / Require / Revert Violation"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Wrong Selection of Guard Function"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-110: Assert Violation"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Assertion Failure - AF"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Strict require"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Using Built-in Functions"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Requirement Violation"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Requirement Violation"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Assert / Require / Revert Violation"
            }
          ],
          "cwes": [
            "CWE-20: Improper Input Validation",
            "CWE-396: Declaration of Catch for Generic Exception"
          ],
          "swcs": [],
          "tools": [
            "smartcheck",
            "slither",
            "mythril"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [
            "Reentrancy"
          ],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-bb68a7d2-c7fd-4462-be8e-e6e28eb0c97c"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1039,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107\nSeverity: Low"
      },
      "ruleId": "mythril_0_23_15_External_Call_To_User_Supplied_Address_SWC_107",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1039,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
      },
      "ruleId": "mythril_0_23_15_Unchecked_return_value_from_external_call_SWC_104",
      "sbo": [
        {
          "name": "Unchecked External Call",
          "description": "Unchecked return values of external calls (functions not raising exceptions  i. e. call / callcode / delegatecall/ send should be inside 'if' statements)  ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Function Calls"
          ],
          "attacks": [
            "GovernMental",
            "King of the Ether Throne",
            "EtherPot"
          ],
          "references": [
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Check of External Call Return Value"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-104: Unchecked Call Return Value"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Direct Call To Untrusted Contract"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Unchecked Send"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified External Call"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unchecked External Call"
            }
          ],
          "cwes": [
            "CWE-252: Unchecked Return Value",
            "CWE-703: Improper Check or Handling of Exceptional Conditions"
          ],
          "swcs": [
            "SWC-104: Unchecked Call Return Value"
          ],
          "tools": [
            "vandal",
            "smartcheck",
            "slither",
            "mythril",
            "ethainter",
            "conkas"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-996b082e-54ae-4bc1-8a98-f8a24197eac8"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1039,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105\nSeverity: High"
      },
      "ruleId": "mythril_0_23_15_Unprotected_Ether_Withdrawal_SWC_105",
      "sbo": [
        {
          "name": "Unprotected Ether Withdrawal (Unauthorized Transfer)",
          "description": "Unwanted ether withdrawn due to improper access control before transferring funds or improper constructor function which allow to re-initialize the contract -Ether transfers cannot be invocked by arbitrary users  independent from the sender,  callers which are not owners or investors or legitimate payee of a contract (i.e. the call function without user restriction is vulnerable) -involve transfering token from an address different from message sender and there  is no check of allowance/approval from the address owner",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Access Rights / Authorization"
          ],
          "attacks": [
            "Parity Multi-Sig Wallet",
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Unauthorized Ether Withdrawal"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unprotected Transfer Value"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-105: Unprotected Ether Withdrawal"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "No Restricted Transfer"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Leaking Ether To Arbitrary Address"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Ether Leak - EL"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Other Inconsistent, Improper or Unprotected Access Control"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Ether /Token Leaking"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Leaking Ether To Arbitrary Address"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Leaking Ether / Unprotected Ether Withdrawal"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Leaking Ether To Arbitrary Address"
            },
            {
              "ref_id": "Sun 2023",
              "alias": "Unauthorized Transfer"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "No Restricted Transfer"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Access Control"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unrestricted Ether Flow"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Generous Contracts"
            }
          ],
          "cwes": [
            "CWE-284: Improper Access Control"
          ],
          "swcs": [
            "SWC-105: Unprotected Ether Withdrawal"
          ],
          "tools": [
            "vandal",
            "teether",
            "slither",
            "securify",
            "pakala",
            "mythril",
            "maian",
            "ethainter",
            "confuzzius",
            "semgrep"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [
            "Wrong Logic"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b520c431-0060-407b-8b77-0db7d1cc12c9"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1189,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Medium"
      },
      "ruleId": "mythril_0_23_15_State_access_after_external_call_SWC_107",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract MAIN, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1203,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Medium"
      },
      "ruleId": "mythril_0_23_15_State_access_after_external_call_SWC_107",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    }
  ],
  "ethainter": [],
  "conkas": [
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 19
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy"
      },
      "ruleId": "conkas_Reentrancy",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function donate(address)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 13
            }
          }
        }
      ],
      "message": {
        "text": "Integer Overflow"
      },
      "ruleId": "conkas_Integer_Overflow",
      "sbo": [
        {
          "name": "Integer Overflow / Underflow",
          "description": "output of a calculation exceeds the lower or upper range of the variable  size type and so cannot be expressed by such type",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Arithmetics-related",
            "Code Flaws / Errors"
          ],
          "attacks": [
            "POWH Coin 2018",
            "BEC tokens (Beautychain)",
            "Batch Transfer Overflow (CVE-2018\u201310299)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-101: Integer Overflow and Underflow"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Integer Overflow, Integer Underflow"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Integer Bug - IB"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Overflow / Underflow"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified Math"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sun 2020",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Insecure Arithmetic"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Arithmetic Issues"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Over / Under Flow"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Arithmetic Over/Under Flows"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Integer Overflow"
            }
          ],
          "cwes": [
            "CWE-682: Incorrect Calculation"
          ],
          "swcs": [
            "SWC-101: Integer Overflow and Underflow"
          ],
          "tools": [
            "smartcheck",
            "sfuzz",
            "oyente",
            "osiris",
            "conkas",
            "confuzzius",
            "semgrep"
          ],
          "mitigations": [
            "Use OpenZeppelin's SafeMath"
          ],
          "parent_vulnerabilities": [
            "Arithmetic Issues"
          ],
          "enabling_vulnerabilities": [
            "Integer Division",
            "Unsafe Type Inference (Variables)"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-655d7650-b3e3-4eaf-896d-16418d7026ec"
        }
      ]
    },
    {
      "locations": [
        {
          "message": {
            "text": "contract SimpleDAO, function withdraw(uint256)"
          },
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.sol"
            },
            "region": {
              "startLine": 19
            }
          }
        }
      ],
      "message": {
        "text": "Unchecked Low Level Call"
      },
      "ruleId": "conkas_Unchecked_Low_Level_Call",
      "sbo": [
        {
          "name": "Unchecked External Call",
          "description": "Unchecked return values of external calls (functions not raising exceptions  i. e. call / callcode / delegatecall/ send should be inside 'if' statements)  ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Function Calls"
          ],
          "attacks": [
            "GovernMental",
            "King of the Ether Throne",
            "EtherPot"
          ],
          "references": [
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Check of External Call Return Value"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-104: Unchecked Call Return Value"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Direct Call To Untrusted Contract"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Unchecked Send"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified External Call"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unchecked External Call"
            }
          ],
          "cwes": [
            "CWE-252: Unchecked Return Value",
            "CWE-703: Improper Check or Handling of Exceptional Conditions"
          ],
          "swcs": [
            "SWC-104: Unchecked Call Return Value"
          ],
          "tools": [
            "vandal",
            "smartcheck",
            "slither",
            "mythril",
            "ethainter",
            "conkas"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-996b082e-54ae-4bc1-8a98-f8a24197eac8"
        }
      ]
    }
  ],
  "vandal": [
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1039,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "ReentrantCall"
      },
      "ruleId": "vandal_ReentrantCall",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            },
            "region": {
              "startColumn": 1039,
              "startLine": 1
            }
          }
        }
      ],
      "message": {
        "text": "UncheckedCall"
      },
      "ruleId": "vandal_UncheckedCall",
      "sbo": [
        {
          "name": "Unchecked External Call",
          "description": "Unchecked return values of external calls (functions not raising exceptions  i. e. call / callcode / delegatecall/ send should be inside 'if' statements)  ",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Function Calls"
          ],
          "attacks": [
            "GovernMental",
            "King of the Ether Throne",
            "EtherPot"
          ],
          "references": [
            {
              "ref_id": "Rameder 2021",
              "alias": "Unchecked Low level call / send Return Values"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Improper Check of External Call Return Value"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-104: Unchecked Call Return Value"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Direct Call To Untrusted Contract"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Unchecked External Call"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Unchecked Send"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified External Call"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Mishandled / Unhandled Exceptions"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Unchecked Call"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Mishandled Exception / Exception Disorders"
            },
            {
              "ref_id": "Tsankov 2018",
              "alias": "Unhandled Exception"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Unchecked Return Values for Low Level Calls"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "Unused Return"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Unchecked Low Level Calls"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Unchecked CALL Return Value"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Unchecked External Call"
            }
          ],
          "cwes": [
            "CWE-252: Unchecked Return Value",
            "CWE-703: Improper Check or Handling of Exceptional Conditions"
          ],
          "swcs": [
            "SWC-104: Unchecked Call Return Value"
          ],
          "tools": [
            "vandal",
            "smartcheck",
            "slither",
            "mythril",
            "ethainter",
            "conkas"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-996b082e-54ae-4bc1-8a98-f8a24197eac8"
        }
      ]
    }
  ],
  "osiris": [
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Callstack bug"
      },
      "ruleId": "osiris_Callstack_bug",
      "sbo": [
        {
          "name": "CallStack Depth Limit",
          "description": "Exception after the call stack depth of 1024 frames is exceeded (not handled by victim contract, or return value not checked)",
          "sample_code": "",
          "level": "EVM",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "GovernMental",
            "King of the Ether Throne"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Stack Size Limit"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "CallStack Depth Limit"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Stack-based Buffer Overflow"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Call Stack Depth Limitation"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "CallStack Depth"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "CallStack Depth Limit"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Stack Size Limit"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Callstack Bound"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Callstack Depth Issue"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Stack Overflow"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Call Depth Attack"
            }
          ],
          "cwes": [],
          "swcs": [],
          "tools": [
            "oyente",
            "osiris"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "Mishandled Exception"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-91f06cc5-acb9-40d3-bb4f-ff55f0e6fe72"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Overflow bugs"
      },
      "ruleId": "osiris_Overflow_bugs",
      "sbo": [
        {
          "name": "Integer Overflow / Underflow",
          "description": "output of a calculation exceeds the lower or upper range of the variable  size type and so cannot be expressed by such type",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Arithmetics-related",
            "Code Flaws / Errors"
          ],
          "attacks": [
            "POWH Coin 2018",
            "BEC tokens (Beautychain)",
            "Batch Transfer Overflow (CVE-2018\u201310299)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-101: Integer Overflow and Underflow"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Integer Overflow, Integer Underflow"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Integer Bug - IB"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Overflow / Underflow"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified Math"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sun 2020",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Insecure Arithmetic"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Arithmetic Issues"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Over / Under Flow"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Arithmetic Over/Under Flows"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Integer Overflow"
            }
          ],
          "cwes": [
            "CWE-682: Incorrect Calculation"
          ],
          "swcs": [
            "SWC-101: Integer Overflow and Underflow"
          ],
          "tools": [
            "smartcheck",
            "sfuzz",
            "oyente",
            "osiris",
            "conkas",
            "confuzzius",
            "semgrep"
          ],
          "mitigations": [
            "Use OpenZeppelin's SafeMath"
          ],
          "parent_vulnerabilities": [
            "Arithmetic Issues"
          ],
          "enabling_vulnerabilities": [
            "Integer Division",
            "Unsafe Type Inference (Variables)"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-655d7650-b3e3-4eaf-896d-16418d7026ec"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Reentrancy bug"
      },
      "ruleId": "osiris_Reentrancy_bug",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Underflow bugs"
      },
      "ruleId": "osiris_Underflow_bugs",
      "sbo": [
        {
          "name": "Integer Overflow / Underflow",
          "description": "output of a calculation exceeds the lower or upper range of the variable  size type and so cannot be expressed by such type",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Arithmetics-related",
            "Code Flaws / Errors"
          ],
          "attacks": [
            "POWH Coin 2018",
            "BEC tokens (Beautychain)",
            "Batch Transfer Overflow (CVE-2018\u201310299)"
          ],
          "references": [
            {
              "ref_id": "Kushwaha 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-101: Integer Overflow and Underflow"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Integer Overflow, Integer Underflow"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Unchecked Math"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Integer Bug - IB"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Unmatched Type Assignment"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Overflow / Underflow"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Overflow and Underflow"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Arithmetic issues"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Non-Verified Math"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Integer Over/Underflow"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sun 2020",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Integer Overflow"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Integer Overflow / Underflow"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Insecure Arithmetic"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Arithmetic Issues"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Over / Under Flow"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Integer Overflow and Underflow"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Arithmetic Over/Under Flows"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Integer Overflow"
            }
          ],
          "cwes": [
            "CWE-682: Incorrect Calculation"
          ],
          "swcs": [
            "SWC-101: Integer Overflow and Underflow"
          ],
          "tools": [
            "smartcheck",
            "sfuzz",
            "oyente",
            "osiris",
            "conkas",
            "confuzzius",
            "semgrep"
          ],
          "mitigations": [
            "Use OpenZeppelin's SafeMath"
          ],
          "parent_vulnerabilities": [
            "Arithmetic Issues"
          ],
          "enabling_vulnerabilities": [
            "Integer Division",
            "Unsafe Type Inference (Variables)"
          ],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-655d7650-b3e3-4eaf-896d-16418d7026ec"
        }
      ]
    }
  ],
  "ethor": [
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "insecure"
      },
      "ruleId": "ethor_2023_insecure",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    }
  ],
  "oyente": [
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Callstack Depth Attack Vulnerability"
      },
      "ruleId": "oyente_Callstack_Depth_Attack_Vulnerability",
      "sbo": [
        {
          "name": "CallStack Depth Limit",
          "description": "Exception after the call stack depth of 1024 frames is exceeded (not handled by victim contract, or return value not checked)",
          "sample_code": "",
          "level": "EVM",
          "categories": [
            "Exceptions"
          ],
          "attacks": [
            "GovernMental",
            "King of the Ether Throne"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Stack Size Limit"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "CallStack Depth Limit"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Stack-based Buffer Overflow"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Call Stack Depth Limitation"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "CallStack Depth"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "CallStack Depth Limit"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Mishandled Exceptions"
            },
            {
              "ref_id": "Dingman 2019",
              "alias": "Stack Size Limit"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Callstack Bound"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Callstack Depth Issue"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Stack Overflow"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Call Depth Attack"
            }
          ],
          "cwes": [],
          "swcs": [],
          "tools": [
            "oyente",
            "osiris"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "Mishandled Exception"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-91f06cc5-acb9-40d3-bb4f-ff55f0e6fe72"
        }
      ]
    },
    {
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "./smartbugs/samples/SimpleDAO.rt.hex"
            }
          }
        }
      ],
      "message": {
        "text": "Re-Entrancy Vulnerability"
      },
      "ruleId": "oyente_Re_Entrancy_Vulnerability",
      "sbo": [
        {
          "name": "Reentrancy",
          "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
          "sample_code": "",
          "level": "Solidity Language",
          "categories": [
            "Reentrancy-related"
          ],
          "attacks": [
            "DAO"
          ],
          "references": [
            {
              "ref_id": "Atzei 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Rameder 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Vidal 2023 - OpenSCV",
              "alias": "Unsafe Credit Transfer"
            },
            {
              "ref_id": "SWC",
              "alias": "SWC-107: Reentrancy"
            },
            {
              "ref_id": "Tikhomirov 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kalra 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Grishchenko 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhou 2022",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Praitheeshan 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Di Angelo 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sayeed 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Durieux 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Luu 2016",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Dika 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Alharby 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Zhang 2023",
              "alias": "Reentrancy - RE"
            },
            {
              "ref_id": "Qian 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chaliasos 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Almakhour 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2022 DefectChecker",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Chen 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Brent 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Tyurin 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kaleem 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Staderini 2022",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Amiet 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Arganaraz 2020",
              "alias": "Re-entrancy"
            },
            {
              "ref_id": "Staderini 2020",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Munir 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Hu 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Iii William E Bodell 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Perez 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Huang 2019",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Li 2017",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Smart Contract Security Field Guide 2023",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "Consensys Diligence 2022",
              "alias": "Single-Function Reentrancy"
            },
            {
              "ref_id": "DASP Top10 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "securify 2.0 2021",
              "alias": "DAO"
            },
            {
              "ref_id": "SMARTDEC 2018",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Kadenzipfel 2023",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Sigmaprime SIGP 2021",
              "alias": "Reentrancy"
            },
            {
              "ref_id": "Trail of Bits 2023",
              "alias": "Re-entrancy"
            }
          ],
          "cwes": [
            "CWE-841: Improper Enforcement of Behavioral Workflow",
            "CWE-691: Insufficient Control Flow Management"
          ],
          "swcs": [
            "SWC-107: Reentrancy"
          ],
          "tools": [
            "vandal",
            "sfuzz",
            "securify",
            "oyente",
            "osiris",
            "mythril",
            "ethor",
            "conkas",
            "confuzzius",
            "semgrep",
            "slither"
          ],
          "mitigations": [],
          "parent_vulnerabilities": [
            "A given function is invoked multiple times unexpectedly"
          ],
          "enabling_vulnerabilities": [],
          "impacting_vulnerabilities": [],
          "url": "https://smart-contracts-vulns-data-model.github.io/smart-vulnerabilities/main?vulnerability=vul-b19d6805-3e26-4a93-8237-23fd200ec483"
        }
      ]
    }
  ]
}